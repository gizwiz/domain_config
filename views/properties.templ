package views

import (
	"strconv"

	"github.com/gizwiz/domain_config/models"
)

templ PropertiesPage(propertyValues []models.PropertyValue, keyFilter string, modifiedOnly bool, allTags []models.Tag,  isSelectedTag models.StringPredicate) {
	<html>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			@style()
			@scripts()
		</head>
		<body>
			@properties(propertyValues, keyFilter, modifiedOnly, allTags, isSelectedTag)
		</body>
	</html>
}

templ style() {
	<style type="text/css">
    table {
        font-family: monospace;
        width: 100%;
        border-collapse: collapse;
    }

    table, th, td {
        border: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2; /* Soft background color for headers */
        text-align: left;
        padding: 8px;
    }

    td {
        padding: 8px;
    }

    td:first-child {
        background-color: #f9f9f9; /* Soft background color for the key column */
    }

    #properties tbody tr:focus td:first-child {
        background-color: #e7f4ff; /* Light blue background for visual focus indication */
    }

  form#propertyFilterForm {
    display: flex;
    flex-direction: column;
    max-width: 300px;
    margin: 20px;
  }
  form#propertyFilterForm > div {
    margin-bottom: 10px;
  }
  form#propertyFilterForm label {
    margin-bottom: 5px;
    display: block;
  }
  form#propertyFilterForm .form-group {
    margin-bottom: 15px;
  }
  form#propertyFilterForm .checkbox-group {
    display: flex;
    align-items: center;
  }  
  form#propertyFilterForm .checkbox-group input[type="checkbox"] {
    margin-right: 10px; /* Adjust spacing between checkbox and label */
  }
  form#propertyFilterForm .tags-select {
    display: flex;
    flex-direction: column;
  }
  form#propertyFilterForm .tags-select label {
    align-self: start;
  }
  form#propertyFilterForm .tags-select select {
    align-self: start;
  }
  </style>
}

templ scripts() {
	<script>
    document.addEventListener('DOMContentLoaded', function() {
        var input = document.getElementById('filterInput');
        var tableRows = document.querySelectorAll('#properties tbody tr');

        // When a row is focused, store it's ID
        tableRows.forEach(row => {
          row.addEventListener('focus', function() {
            localStorage.setItem('focusedRow', this.getAttribute('data-id'));
          }, true); // Use capture to ensure the event is detected
        });

        function refocus() {
            var focusedRowId = localStorage.getItem('focusedRow');
            if (focusedRowId) {
              var rowToFocus = document.querySelector('#properties tbody tr[data-id="' + focusedRowId + '"]');
              if (rowToFocus) {
                rowToFocus.focus(); // Focus the row
                // Optional: scroll into view
                rowToFocus.scrollIntoView();
              }
            }
        }

        // when a page is loaded, restore the focus if an ID is stored
        refocus()

        // edit form for a property
        var editForm = document.getElementById('editForm');
        var editModeInput = document.getElementById('editMode');
        var editIdInput = document.getElementById('editID');
        var editKeyInput = document.getElementById('editKey');
        var editDescriptionInput = document.getElementById('editDescription')
        var editDefaultValueInput = document.getElementById('editDefaultValue')
        var editModifiedValueInput = document.getElementById('editModifiedValue')


        function showEditForm(mode, id = -1, key = '', description = '', defaultValue = '', modifiedValue = '') {
            var formAction = mode === 'insert' ? '/insert' : '/update';
            editForm.setAttribute('action', formAction);

            editModeInput.value = mode;
            editIdInput.value = id;
            editKeyInput.value = key;
            editDescriptionInput.value = description;
            editDefaultValueInput.value = defaultValue;
            editModifiedValueInput.value = modifiedValue;

            editForm.style.display = '';
            editKeyInput.focus();
        }

        function hideEditForm() {
            document.getElementById('editForm').style.display = 'none';
        }

        function isInputActive() {
            var activeElement = document.activeElement;
            return activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA';
        }

        function toggleHelpScreen(display) {
            document.getElementById('helpScreen').style.display = display ? '' : 'none';
        }
        
        // Function to move focus to the next or previous row
        function moveFocus(currentRow, offset) {
            var currentIndex = Array.from(tableRows).indexOf(currentRow);
            var nextIndex = currentIndex + offset;
            if (nextIndex >= 0 && nextIndex < tableRows.length) {
                tableRows[nextIndex].focus();
            }
        }

        // Combined event listener for all keydown events
        document.addEventListener('keydown', function(event) {
            if (isInputActive() && event.key !== 'Escape') {
                return; // Exit early if an input or textarea is active
            }

            var activeElement = document.activeElement;
            var handled = false;

            switch (event.key) {
                case '?':
                    event.preventDefault();
                    toggleHelpScreen(true);
                    break;

                case 'Escape':
                    event.preventDefault();
                    toggleHelpScreen(false);
                    hideEditForm();
                    refocus();
                    break;

                case 'Tab':
                    if (activeElement === input) {
                        // Tab to focus the first table row
                        event.preventDefault();
                        tableRows[0].focus();
                        handled = true;
                    }
                    break;

                case 'f':
                    if (event.ctrlKey) {
                        // Ctrl+F to focus the input
                        event.preventDefault();
                        input.focus();
                        input.select();
                        handled = true;
                    }
                    break;

                case 'n':
                    // New record mode
                    event.preventDefault();
                    showEditForm('insert');
                    handled = true;
                    break;

                case 'ArrowUp':
                case 'k':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        moveFocus(activeElement, -1);
                        handled = true;
                    }
                    break;

                case 'ArrowDown':
                case 'j':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        moveFocus(activeElement, 1);
                        handled = true;
                    }
                    break;

                case 'e':
                    if (activeElement.tagName === 'TR') {
                        // e to edit the row
                        event.preventDefault();
                        var id = activeElement.dataset.id; // Assuming each row has a 'data-id' attribute
                        fetch('/property/' + id)
                            .then(response => response.json())
                            .then(data => {
                                showEditForm('update', data.id, data.key, data.description, data.default_value, data.modified_value);
                            })
                            .catch(error => console.error('Error fetching property:', error));
                        handled = true;
                    }
                    break;
                case 'c':
                    if (activeElement.tagName === 'TR') {
                        // c to calculate all properties
                        event.preventDefault();
                        fetch('/calculate' )
                            .then(response => response.json())
                            .catch(error => console.error('Error calculating properties', error));
                        window.location.reload()
                        handled = true;
                    }
                    break;
            }

            if (handled) {
                // Stop the default action to prevent the browser from scrolling
                event.stopPropagation();
            }
        });

        document.getElementById('modifiedOnlyCheckbox').addEventListener('change', function() {
            document.getElementById('modifiedOnly').value = this.checked ? 'true' : 'false';
            document.getElementById('propertyFilterForm').submit();
        });

        document.getElementById('selectedTags').addEventListener('change', function() {
            document.getElementById('propertyFilterForm').submit();
        });

        // Event listener to submit the form when Enter is pressed in the input
        input.addEventListener('keyup', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                this.form.submit();
            }
        });
    });

 </script>
}

templ properties(data []models.PropertyValue, keyFilter string, modifiedOnly bool, allTags []models.Tag, isSelectedTag models.StringPredicate) {
	// help screen
	@helpScreen()
	// filter the property list
	@propertyFilterForm(keyFilter, modifiedOnly, allTags, isSelectedTag)
	// edit form for a single property
	@propertyEditForm()
	// property list
	<table id="properties">
		<thead>
			<tr>
				<th>Key</th>
				<th>Description</th>
				<th>Value</th>
			</tr>
		</thead>
		<tbody>
			for _, item := range data {
				<tr tabindex="0" data-id={ strconv.Itoa(item.ID) }>
					<td>{ item.Key }</td>
					if item.Description.Valid {
						<td>{ item.Description.String }</td>
					} else {
						<td></td>
					}
					if item.Value.Valid {
						<td>{ item.Value.String }</td>
					} else {
						<td></td>
					}
				</tr>
			}
		</tbody>
	</table>
}

templ propertyFilterForm(keyFilter string, isModifiedOnly bool, allTags []models.Tag, isSelectedTag models.StringPredicate) {
	<form id="propertyFilterForm" action="/properties" method="get">
		<div class="form-group">
			<label for="keyFilter">Key Filter</label>
			<input type="text" id="filterInput" name="keyFilter" value={ keyFilter }/>
		</div>
		<div class="form-group checkbox-group">
			<input type="hidden" id="modifiedOnly" name="modifiedOnly" value="false"/>
			<input
				type="checkbox"
				id="modifiedOnlyCheckbox"
				value="{isModifiedOnly}"
				if isModifiedOnly {
					checked
				}
			/>
			<label for="modifiedOnlyCheckbox">Modified Only</label>
		</div>
		<div class="form-group tags-select">
			<label for="selectedTags">Tags</label>
			<select id="selectedTags" name="selectedTags" multiple>
				for _, tag := range allTags {
					<option
						value={ strconv.Itoa(tag.ID) }
						if isSelectedTag( strconv.Itoa(tag.ID)) {
							selected
						}
					>{ tag.Tag }</option>
				}
			</select>
		</div>
	</form>
}

templ propertyEditForm() {
	<form id="editForm" style="display: none;" method="post">
		<input type="hidden" id="editMode" name="mode" value=""/>
		<input type="hidden" id="editID" name="id" value=""/>
		<input type="text" id="editKey" name="key" value=""/>
		<input type="text" id="editDescription" name="description" placeholder="description"/>
		<input type="text" id="editDefaultValue" name="defaultValue" placeholder="default value"/>
		<input type="text" id="editModifiedValue" name="modifiedValue" placeholder="value specific for this domain"/>
		<input type="submit" value="Submit"/>
	</form>
}

templ helpScreen() {
	<div id="helpScreen" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0, 0, 0, 0.5);">
		<div style="background:white; margin:10% auto; padding:20px; width:50%;">
			<h2>Keyboard Shortcuts</h2>
			<p><strong>ctrl-f:</strong> go to the "Search for keys" field, to filter out specific property keys, using % wildcards such as in a database.</p>
			<p><strong>n:</strong> Create new record</p>
			<p><strong>e:</strong> Edit selected record</p>
			<p><strong>c:</strong> Recalculate all properties</p>
			<p><strong>?:</strong> Show this help screen</p>
			<p><strong>Escape:</strong> hide Edit form (cfr e/n keys), hide Help screen</p>
			<!-- Add more shortcuts as needed -->
			<button onclick="document.getElementById('helpScreen').style.display='none'">Close</button>
		</div>
	</div>
}
