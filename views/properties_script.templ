package views

templ scripts() {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var input = document.getElementById('filterInput');
        var tableRows = document.querySelectorAll('#properties tbody tr');

        // When a row is focused, store it's ID
        tableRows.forEach(row => {
          row.addEventListener('focus', function() {
            localStorage.setItem('focusedRow', this.getAttribute('data-id'));
          }, true); // Use capture to ensure the event is detected
        });

        function refocus() {
            var focusedRowId = localStorage.getItem('focusedRow');
            if (focusedRowId) {
              var rowToFocus = document.querySelector('#properties tbody tr[data-id="' + focusedRowId + '"]');
              if (rowToFocus) {
                rowToFocus.focus(); // Focus the row
                // Optional: scroll into view
                rowToFocus.scrollIntoView();
              }
            }
        }

        // when a page is loaded, restore the focus if an ID is stored
        refocus()

        function setSelectedTags(propertyTags) {
            var select = document.getElementById('editPropertyTags');

            // If propertyTags is null or undefined, treat it as an empty array
            if (!propertyTags) {
                propertyTags = [];
            }

            // Loop through each option in the select element
            for (var i = 0; i < select.options.length; i++) {
                var option = select.options[i];
                // Check if the current option's value is in the propertyTags array
                if (propertyTags.includes(parseInt(option.value))) {
                    // If it is, mark it as selected
                    option.selected = true;
                } else {
                    // Otherwise, ensure it is not selected
                    option.selected = false;
                }
            }
        }

        // edit form for a property
        var editForm = document.getElementById('editForm');
        var editModeInput = document.getElementById('editMode');
        var editIdInput = document.getElementById('editID');
        var editKeyInput = document.getElementById('editKey');
        var editDescriptionInput = document.getElementById('editDescription')
        var editDefaultValueInput = document.getElementById('editDefaultValue')
        var editModifiedValueInput = document.getElementById('editModifiedValue')
        var editPropertyTagsInput = document.getElementById('editPropertyTags')


        function showEditForm(mode, id = -1, key = '', description = '', defaultValue = '', modifiedValue = '', propertyTags=[], activeRow) {
            var formAction = mode === 'insert' ? '/insert' : '/update';
            editForm.setAttribute('action', formAction);

            editModeInput.value = mode;
            editIdInput.value = id;
            editKeyInput.value = key;
            editDescriptionInput.value = description;
            editDefaultValueInput.value = defaultValue;
            editModifiedValueInput.value = modifiedValue;
            editPropertyTagsInput.value = propertyTags;

            // Move the form to the active row's position in "edit" mode, not for a new property
            if (mode !== 'insert') {
                // Create a new row and a cell that spans all columns
                var newRow = document.createElement('tr');
                var newCell = document.createElement('td');
                var colSpan = activeRow.children.length; // Assuming the row has 'td' elements
                newCell.colSpan = colSpan;

                // Append the form to the new cell, and the cell to the new row
                newCell.appendChild(editForm);
                newRow.appendChild(newCell);

                // Insert the new row after the active row
                activeRow.after(newRow);

                // add the active class to the row
                activeRow.classList.add('active-row')

               // update selected tags for this property
               setSelectedTags(propertyTags);
            }

            editForm.style.display = 'block';
            editKeyInput.focus();
        }

        function hideEditForm() {
            document.getElementById('editForm').style.display = 'none';
            var editFormParent = editForm.parentNode;

            // Move the form back to its original location
            var originalLocation = document.getElementById('new_property');
            if (originalLocation) {
                originalLocation.appendChild(editForm);
            }
            // Check if the form is inside a <td> and <tr>
            if (editFormParent && editFormParent.nodeName === 'TD') {
                var editFormRow = editFormParent.parentNode;
                if (editFormRow && editFormRow.nodeName === 'TR') {
                    // Remove the entire row
                    editFormRow.remove();
                }
            }
            // Remove active class from all rows
            var rows = document.querySelectorAll('#properties tbody tr');
            rows.forEach(function(row) {
                row.classList.remove('active-row');
            });
        }

        function isInputActive() {
            var activeElement = document.activeElement;
            return activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA';
        }

        function toggleHelpScreen(display) {
            document.getElementById('helpScreen').style.display = display ? '' : 'none';
        }

        // Function to move focus to the next or previous row
        function moveFocus(currentRow, offset) {
            var currentIndex = Array.from(tableRows).indexOf(currentRow);
            var nextIndex = currentIndex + offset;
            if (nextIndex >= 0 && nextIndex < tableRows.length) {
                tableRows[nextIndex].focus();
            }
        }

        // Combined event listener for all keydown events
        document.addEventListener('keydown', function(event) {
            if (isInputActive() && event.key !== 'Escape') {
                return; // Exit early if an input or textarea is active
            }

            var activeElement = document.activeElement;
            var handled = false;

            switch (event.key) {
                case '?':
                    event.preventDefault();
                    toggleHelpScreen(true);
                    break;

                case 'Escape':
                    event.preventDefault();
                    toggleHelpScreen(false);
                    document.getElementById('new_property').style.display="none";
                    hideEditForm();
                    refocus();
                    break;

                case 'Tab':
                    if (activeElement === input) {
                        // Tab to focus the first table row
                        event.preventDefault();
                        tableRows[0].focus();
                        handled = true;
                    }
                    break;

                case 'f':
                    if (event.ctrlKey) {
                        // Ctrl+F to focus the input
                        event.preventDefault();
                        input.focus();
                        input.select();
                        handled = true;
                    }
                    break;

                case 'n':
                    // New record mode
                    event.preventDefault();
                    document.getElementById('new_property').style.display="";
                    showEditForm('insert');
                    handled = true;
                    break;

                case 'ArrowUp':
                case 'k':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        moveFocus(activeElement, -1);
                        handled = true;
                    }
                    break;

                case 'ArrowDown':
                case 'j':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        moveFocus(activeElement, 1);
                        handled = true;
                    }
                    break;

                case 'e':
                    if (activeElement.tagName === 'TR') {
                        // e to edit the row
                        event.preventDefault();
                        var id = activeElement.dataset.id; // Assuming each row has a 'data-id' attribute
                        fetch('/property/' + id)
                            .then(response => response.json())
                            .then(data => {
                                console.log("/fetch/" +id, data)
                                showEditForm('update', data.Property.id, data.Property.key, data.Property.description, data.Property.default_value, data.Property.modified_value, data.TagIDs, activeElement);
                            })
                            .catch(error => console.error('Error fetching property:', error));
                        handled = true;
                    }
                    break;
                case 'c':
                    if (activeElement.tagName === 'TR') {
                        // c to calculate all properties
                        event.preventDefault();
                        fetch('/calculate' )
                            .then(response => response.json())
                            .catch(error => console.error('Error calculating properties', error));
                        window.location.reload()
                        handled = true;
                    }
                    break;
            }

            if (handled) {
                // Stop the default action to prevent the browser from scrolling
                event.stopPropagation();
            }
        });

        document.getElementById('modifiedOnlyCheckbox').addEventListener('change', function() {
            document.getElementById('modifiedOnly').value = this.checked ? 'true' : 'false';
            document.getElementById('propertyFilterForm').submit();
        });

        document.getElementById('selectedTags').addEventListener('change', function() {
            document.getElementById('propertyFilterForm').submit();
        });

        // Event listener to submit the form when Enter is pressed in the input
        input.addEventListener('keyup', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                this.form.submit();
            }
        });
    });
</script>
}

