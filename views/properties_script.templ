package views

templ scripts() {
<script src="/static/js/htmx.min.js" />
<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        var input = document.getElementById('filterInput');
        var tableRows = document.querySelectorAll('#properties tbody tr');

        // When a row is focused, store it's ID
        tableRows.forEach(row => {
          row.addEventListener('focus', function() {
            localStorage.setItem('focusedRow', this.getAttribute('data-id'));
          }, true); // Use capture to ensure the event is detected
        });

        function refocus() {
            var focusedRowId = localStorage.getItem('focusedRow');
            if (focusedRowId) {
              var rowToFocus = document.querySelector('#properties tbody tr[data-id="' + focusedRowId + '"]');
              if (rowToFocus) {
                rowToFocus.focus(); // Focus the row
                // Optional: scroll into view
                rowToFocus.scrollIntoView();
              }
            }
        }

        // when a page is loaded, restore the focus if an ID is stored
        refocus()

        function setSelectedTags(propertyTags) {
            var select = document.getElementById('editPropertyTags');

            // If propertyTags is null or undefined, treat it as an empty array
            if (!propertyTags) {
                propertyTags = [];
            }

            // Loop through each option in the select element
            for (var i = 0; i < select.options.length; i++) {
                var option = select.options[i];
                // Check if the current option's value is in the propertyTags array
                if (propertyTags.includes(parseInt(option.value))) {
                    // If it is, mark it as selected
                    option.selected = true;
                } else {
                    // Otherwise, ensure it is not selected
                    option.selected = false;
                }
            }
        }

        function disableOtherRows(exceptRow) {
            var rows = document.querySelectorAll('#properties tr');
            rows.forEach(function(row) {
                if (row !== exceptRow) {
                    row.classList.add('disable-pointer-events');
                }
            });
        }

        function enableAllRows() {
            var rows = document.querySelectorAll('#properties tr');
            rows.forEach(function(row) {
                row.classList.remove('disable-pointer-events');
            });
        }

        function isInputActive() {
            var activeElement = document.activeElement;
            return activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA';
        }

        function toggleHelpScreen(display) {
            document.getElementById('helpScreen').style.display = display ? '' : 'none';
        }

        // Function to move focus to the next or previous row
        function moveFocus(currentRow, offset) {
            var currentIndex = Array.from(tableRows).indexOf(currentRow);
            var nextIndex = currentIndex + offset;
            if (nextIndex >= 0 && nextIndex < tableRows.length) {
                tableRows[nextIndex].focus();
            }
        }

        function hideEditForm() {
            document.getElementById('new_property').style.display="none";

            var editForm = document.getElementById('editForm');
            if (editForm) {
                editForm.remove();
            }

            var editRow = document.getElementById('edit-row');
            if (editRow) {
                editRow.remove();
            }
        }

        function editFormSubmitHandler(event) {
            event.preventDefault();
            
            // Find the closest form element
            var form = event.target.closest('form');
            if (!(form instanceof HTMLFormElement)) {
                console.error('editFormSubmitHandler: Unable to find form element');
                return;
            }
            
            // Create a new FormData object
            var formData = new FormData(form);
            
            // Get all input fields
            var inputs = form.querySelectorAll('input, textarea, select');
            
            // Iterate through all inputs
            inputs.forEach(function(input) {
                // If the input is empty or undefined, remove it from formData
                if (input.value === '' || input.value === 'undefined') {
                    formData.delete(input.name);
                }
            });
            
            // Get the tags select element
            var tagsSelect = form.querySelector('#editPropertyTags');
            
            if (tagsSelect) {
                // Create a hidden input for each selected tag
                Array.from(tagsSelect.selectedOptions).forEach(function(option, index) {
                    formData.append('tags[' + index + ']', option.value);
                });
            }
            
            // Use the modified formData for submission
            htmx.trigger(form, 'htmx:submit', { formData: formData });
            
            // Remove the temporary hidden inputs after submission
            if (tagsSelect) {
                form.querySelectorAll('input[name^="tags["]').forEach(function(input) {
                    input.remove();
                });
            }
        }

        function setupFormEventListeners(form) {
            form.addEventListener('submit', editFormSubmitHandler);

            var submitButton = form.querySelector('input[type="submit"]');
            if (submitButton) {
                submitButton.addEventListener('click', function(event) {
                    event.preventDefault();
                    editFormSubmitHandler(event);
                });
            }

            // Add event listener for tags select
            var tagsSelect = form.querySelector('#editPropertyTags');
            if (tagsSelect) {
                tagsSelect.addEventListener('change', function(event) {
                    editFormSubmitHandler(event);
                });
            }
        }

        function handleKeydown(event) {
            if (isInputActive() && event.key !== 'Escape') {
                return; // Exit early if an input or textarea is active
            }

            var activeElement = document.activeElement;
            var handled = false;

            switch (event.key) {
                case '?':
                    event.preventDefault();
                    toggleHelpScreen(true);
                    break;

                case 'Escape':
                    event.preventDefault();
                    toggleHelpScreen(false);
                    hideEditForm();
                    refocus();
                    break;

                case 'Tab':
                    if (activeElement === input) {
                        // Tab to focus the first table row
                        event.preventDefault();
                        tableRows[0].focus();
                        handled = true;
                    }
                    break;

                case 'f':
                    if (event.ctrlKey) {
                        // Ctrl+F to focus the input
                        event.preventDefault();
                        input.focus();
                        input.select();
                        handled = true;
                    }
                    break;

                case '/':
                    event.preventDefault();
                    input.focus();
                    input.select();
                    handled = true;
                    break;

                case 'n':
                    // New record mode
                    event.preventDefault();
                    hideEditForm();
                    document.getElementById('new_property').style.display="";
                    htmx.ajax('GET', '/getPropertyForm', { target: '#new_property_form', swap: 'innerHTML' }).then(() => {
                        var newForm = document.getElementById('editForm');
                        if (newForm) {
                            // Explicitly set insert mode
                            document.getElementById('editMode').value = 'insert';
                            newForm.setAttribute('hx-post', '/insert');

                            // Add event listeners to the new form
                            setupFormEventListeners(newForm);

                            document.getElementById('editKey').focus();
                        }
                    });
                    handled = true;
                    break;

                case 'ArrowUp':
                case 'k':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        moveFocus(activeElement, -1);
                        handled = true;
                    }
                    break;

                case 'ArrowDown':
                case 'j':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        moveFocus(activeElement, 1);
                        handled = true;
                    }
                    break;
                case 'e':
                    if (activeElement.tagName === 'TR') {
                        event.preventDefault();
                        hideEditForm();
                        var id = activeElement.dataset.id;
                        fetch('/property/' + id)
                            .then(response => response.json())
                            .then(data => {
                                htmx.ajax('GET', '/getPropertyForm', {
                                    target: '#temp-container',
                                    swap: 'innerHTML'
                                }).then(() => {
                                    var editForm = document.getElementById('editForm');
                                    if (editForm) {
                                        // Populate form fields here
                                        document.getElementById('editID').value = data.Property.id || '';
                                        document.getElementById('editKey').value = data.Property.key || '';
                                        document.getElementById('editDescription').value = data.Property.description || '';
                                        document.getElementById('editDefaultValue').value = data.Property.default_value || '';
                                        document.getElementById('editModifiedValue').value = data.Property.modified_value || '';

                                        // Set the selected tags
                                        setSelectedTags(data.TagIDs);

                                        // Explicitly set edit mode
                                        document.getElementById('editMode').value = 'update';
                                        editForm.setAttribute('hx-post', '/update');

                                        // Move the form to the desired location in the DOM
                                        var targetRow = document.querySelector('tr[data-id="' + id + '"]');
                                        if (targetRow) {
                                            var newRow = document.createElement('tr');
                                            newRow.id = 'edit-row';
                                            var newCell = document.createElement('td');
                                            newCell.colSpan = targetRow.cells.length;
                                            newCell.appendChild(editForm);
                                            newRow.appendChild(newCell);
                                            targetRow.parentNode.insertBefore(newRow, targetRow.nextSibling);

                                            // Set up event listeners
                                            setupFormEventListeners(editForm);

                                            document.getElementById('editKey').focus();
                                        }
                                    }
                                });
                            })
                            .catch(error => console.error('Error fetching property:', error));
                        handled = true;
                    }
                    break;
                case 'c':
                    if (activeElement.tagName === 'TR') {
                        // c to calculate all properties
                        event.preventDefault();

                        // Change cursor to busy and disable key interactions
                        document.body.classList.add('cursor-busy');
                        document.removeEventListener('keydown', handleKeydown);

                        fetch('/calculate')
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.text(); // Get response as text
                        })
                        .then(text => {
                            console.log('Raw response text:', text); // Log the raw response text
                            if (!text) {
                                throw new Error('Empty response text');
                            }
                            try {
                                const data = JSON.parse(text); // Parse JSON manually
                                window.location.reload()
                                console.log('Parsed data:', data);
                            } catch (error) {
                                console.error('Error parsing JSON:', error, 'Response text:', text);
                            }
                        })
                        .catch(error => console.error('Error calculating properties:', error))
                        .finally(() => {
                            // Remove busy cursor and re-enable key interactions
                            document.body.classList.remove('cursor-busy');
                            document.addEventListener('keydown', handleKeydown);
                        });
                    }
                    break;
            }

            if (handled) {
                // Stop the default action to prevent the browser from scrolling
                event.stopPropagation();
            }
        }


        // Function to refresh the property list after form submission
        function propertyListRefresh(event) {
            // Check if the event is related to the form submission
            if (event.detail.target.id === 'editForm') {
                document.getElementById('error-div').style.display = 'none';

                const urlParams = new URLSearchParams(window.location.search);
                const url = '/propertyList?' + urlParams.toString();
                htmx.ajax('GET', url, {
                    target: '#property-list',
                    swap: 'outerHTML'
                });
            }
        }

        // Register the custom event handler
        document.body.addEventListener('htmx:afterRequest', propertyListRefresh);

        document.addEventListener('htmx:responseError', function(evt) {
            var response = evt.detail.xhr;
            if (response.status >= 400 && response.status < 600) {
                errorMessage = response.responseText;
                try {
                    const errorData = JSON.parse(response.responseText);
                    errorMessage = errorData.error;
                } catch (e) {
                    // ignore as we will simply show the full json then
                }
                document.getElementById('error-msg').innerHTML = errorMessage;
                document.getElementById('error-div').style.display = 'block';
            }
        });

        document.getElementById('modifiedOnlyCheckbox').addEventListener('change', function() {
            document.getElementById('modifiedOnly').value = this.checked ? 'true' : 'false';
            document.getElementById('propertyFilterForm').submit();
        });

        document.getElementById('selectedTags').addEventListener('change', function() {
            document.getElementById('propertyFilterForm').submit();
        });

        // Event listener to submit the form when Enter is pressed in the input
//        input.addEventListener('keyup', function(event) {
//            if (event.key === 'Enter') {
//                event.preventDefault();
//                this.form.submit();
//            }
//        });

        // Combined event listener for all keydown events
        document.addEventListener('keydown', handleKeydown);
    });
</script>
}